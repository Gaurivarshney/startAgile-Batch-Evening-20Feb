Install Docker on Ubuntu 22:
=========================

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

Install Docker 

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

systemctl start docker

=====================================================
Install Docker on Amazon linux 2023:
======================================================
sudo yum install -y docker
sudo yum update -y
sudo systemctl enable docker
sudo systemctl start docker
docker --version


============================================================

Docker Images
=================================================

By Default we will not have images on the docker host machine.

All the images will be available at docker host

Demo1: List images on the dockerHost

# docker images


Demo 2: Pull images on the Docker Host

# docker pull ubuntu

Demo 3: pull an Image of a specific tag

# docker pull ubuntu:20.04

Demo 4: See details about image

# docker history ubuntu

# docker history ubuntu:20.04


Demo 5: Delete an Image

# docker rmi ubuntu
# docker rmi ubuntu:20.04





















Docker Image carries it address form where we have to pull it

The image Name will be in the below format:

 registrypath/reponame/Imagename:tagname

docker.io/library/ubuntu:latest

Example:
===================
# docker pull ubuntu

# docker pull sonal04/myimage:01

# docker pull awsRegistry/reponame/imagename

# docker pull 172.34.56:5000/repo1/imagename

=====================================

# sudo su -

Demo : Pull an Image and run the image to launch a container.

# docker pull ubuntu 

Run the image to launch a container

# docker run ubuntu

Command to list all the containers

# docker ps -a

Container will be created , will have a name and will have an ID and status will be exited.

Create a container from same image but give a unique name to the container:

# docker run --name cont1 ubuntu

Container will be created , will have a name as cont1 and will have an ID and status will be exited.

Note: When containers are in exited state, docker host will not allocate any CPU or memory to the containers


You can check number of resources allocated to container on the host machine using the below command

# docker stats

Press CTRL+c to come out to the terminal.


Foreground Mode(-it)
=========================
Here:

i= interactive
t=terminal

With this option:
  >  A container will be created from the Image
 > Container will be with status Running
 > User of the host machine will be attached to the terminal of the container


# docker run --name u1 -it ubuntu

Come out of the container and keep it running

# press key CTRL pq

Check status of container:

# docker ps -a

Again attach to the terminal of the Up and running container

# docker attach containername/id

Example: docker attach 525ee7990ca0

Note: You can attach only to the up and running OS image containers


Comeout of the container by giving exit signal

# exit


You will be on the VM and container status will be Exited.


Start an exited container:
=======================

# docker start containername/id

# docker ps -a

====================================
Stop a running container 

# docker stop containername

Kill a running container

# docker kill containername

==================================
Delete containers on the docker host

# docker rm -f $(docker ps -aq)

===================================

Detached Mode: (-d)
===================================
With this option:
  >  A container will be created from the Image
 > Container will be with status Running
 > User of the host machine will be detached from the container

# docker run --name web -d nginx

How can we access or attach to the terminal of above container:

# docker exec web uname

Example: docker exec contaienrname command

Docker execute a command on the container.

How can we access or attach to the terminal of nginxcontainer:

# docker exec -it web bash

Give exit to comout of the command


Container will still be running

# docker ps


Check logs of the container:
==============================

# docker logs containername


Describe the details of the container:
=========================

# docker inspect containername/id


Delete all images and stopped containers

# docker system prune --all

Give y 
For command to complete.

All stopped container will be deleted
All images that are dangling(not associated to a container) will be deleted

====================================

Port Mapping/Port forwarding:
====================================





By default as the container is created it is exposed to its target port number .
You can see the exposed port number on the Image dockerfile

Docker says that as soon as the web container is created it can be accessed on the target port but its the users the internet that cannot reach the container.

So in order to access the container from the browser of the machine we have to do port mapping 

Pls note: 
Port mapping has to be done at runtime i.e. with docker run command.
Once a container has been created you cannot do port mapping.
You will delete the container and recreate the container with port mapping
Port mapping is done using -p or -P flag
In port mapping user will give 2 ports which are: VM System port and container target port
Mapping is done as -p 8989:80
     8989 : VM port number
              80: container target port
If you do not know what port numbers to give while creating the container, then use the flag -P.
In this case docker will take a random open port on your VM and map it to the container port. 
       

Demo:
===============================

Create a container with image as nginx and do port mapping (-p)

# sudo su -
# systemctl start docker

# docker run -d -p 8989:80 --name web1 nginx


# docker ps -a




Go to your browser and give:

 #   http://publicIP:8989

We will see the welcome page of Nginx on the container.

Let us deploy our own html page on the nginx container.


For this let us attach to the terminal of the container web1:

# docker exec -it web1 bash

# cd /usr/share/nginx/html

# echo "This is docker session by Sonal Mittal" > index.html
# exit

Just go to the browser and refresh the nginx page. You will see a new deployment.


Create a new container with image as httpd and do port mapping (-P)
============================

# docker run -d -P --name web2 httpd

# docker ps -a

You will see a new port number mapped to your container

Go to the browser and take public Ip and give new system port

You will apache on the webpage
